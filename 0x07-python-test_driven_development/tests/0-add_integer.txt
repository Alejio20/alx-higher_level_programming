Test for add_integer module
===========================
Importing Function from the module
>>> add_integer = __import__('0-add_integer').add_integer

For Two Numbers
===============
Add two positive integers
>>> add_integer(2, 8)
10

Add a positive integer and a negative integer
>>> add_integer(5, -2)
3

>>> add_integer(-3, 1)
-2

Add two negative integers
>>> add_integer(-6, -4)
-10

Add a float and an integer
>>> add_integer(73.2, -4)
69

Add two floats
>>> add_integer(23.12, 8.8)
31

For Arguments
=============
Pass one argument
>>> add_integer(3.1)
101

Pass None as argument
>>> add_integer(None)
Traceback (most recent call last):
...
TypeError: a must be an integer

Pass No argument
>>> add_integer()
Traceback (most recent call last):
...
TypeError: add_integer() missing 1 required positional argument: 'a'

For Errors
==========
Add an integer number and a string
>>> add_integer(4, "School")
Traceback (most recent call last):
...
TypeError: b must be an integer

Add a letter and a number
>>> add_integer('c', 1)
Traceback (most recent call last):
...
TypeError: a must be an integer

Add two letters
>>> add_integer('c', 'm')
Traceback (most recent call last):
...
TypeError: a must be an integer

Add a tuple
>>> add_integer((1, 1))
Traceback (most recent call last):
...
TypeError: a must be an integer

Add a number and a list
>>> add_integer(123, [])
Traceback (most recent call last):
...
TypeError: b must be an integer

Pass a only one string
>>> add_integer("Hello")
Traceback (most recent call last):
...
TypeError: a must be an integer

Case Overflow:
>>> add_integer(float('inf'), 0)
Traceback (most recent call last):
...
OverflowError: cannot convert float infinity to integer

Case NaN:
>>> add_integer(0, float('nan'))
Traceback (most recent call last):
...
ValueError: cannot convert float NaN to integer
